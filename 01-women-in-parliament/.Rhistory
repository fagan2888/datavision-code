foods %>% filter(g2 == "Milk")
short_names <- c(
"Barley, pearl, raw" = "Pearl barley",
"Bread, white, premium" = "White bread",
"Flour, wheat, white, plain, soft" = "White flour",
"Pastry, filo, retail, cooked" = "Filo pastry",
"Sugar, white" = "White sugar",
"Sugar, brown" = "Brown sugar",
"Syrup, golden" = "Golden syrup",
"Wheat, bulgur, raw" = "Bulgur wheat",
"Yogurt, low fat, plain" = "Low-fat yogurt"
)
shorten <- function(food) {
food = str_trim(food)
if (food %in% names(short_names)) {
return(short_names[food][[1]][1])
}
gsub(",.*$", "", as.character(food))
}
foods <- read_csv("/tmp/foods_curated.csv") %>%
distinct() %>%
filter(!name %in% c("Couscous, plain, cooked", "Flour, gram", "Pasta, egg, white, tagliatelle, fresh, boiled in unsalted water")) %>%
mutate(label = ifelse(carbs >= 5, lapply(name, shorten), "")) %>%
mutate(g2 = fct_collapse(g2, `Meat and fish` = c("Meat", "Fish"))) %>%
mutate(g2 = fct_reorder(g2, carbs, .fun='max'))
plot <- foods %>%
ggplot(aes(carbs, g2, label = label, text = name)) +
geom_beeswarm(groupOnX = FALSE) +
scale_x_continuous(breaks=seq(0,110,10))
foods %>%
ggplot(aes(carbs, g2, label = label)) +
geom_jitter(height = 0.3, color = "grey50", alpha = ifelse(foods$carbs < 5, 0.5, 0)) + # trick to only show points with carbs < 5 (o/w factor ordering is lost for some reason)
#geom_beeswarm(data = filter(foods, carbs < 5), color = "grey50", groupOnX = FALSE) +
geom_point(data = filter(foods, carbs >= 5), color = "red", alpha = 0.5) +
geom_text_repel(segment.alpha = 0.3, point.padding = 0.1,
min.segment.length = 0.3,
size = 8/.pt,
xlim = x_limits) +
scale_x_continuous(breaks=seq(0,110,10)) +
labs(
title = "Carbohydrate content of common food ingredients",
caption = "Data source: Composition of foods integrated dataset, Public Health England"
) +
xlab(label = "Carbs (g/100g)") +
theme(axis.title.y = element_blank())
x <- foods %>% filter(g2 == "Nuts and seeds") %>% filter(carbs >= 5)
View(x)
x <- foods %>% filter(g2 == "Herbs and spices") %>% filter(carbs >= 5)
View(x)
short_names <- c(
"Barley, pearl, raw" = "Pearl barley",
"Bread, white, premium" = "White bread",
"Flour, wheat, white, plain, soft" = "White flour",
"Pastry, filo, retail, cooked" = "Filo pastry",
"Pepper, cayenne, ground" = "Cayenne pepper",
"Sugar, white" = "White sugar",
"Sugar, brown" = "Brown sugar",
"Syrup, golden" = "Golden syrup",
"Wheat, bulgur, raw" = "Bulgur wheat",
"Yogurt, low fat, plain" = "Low-fat yogurt"
)
shorten <- function(food) {
food = str_trim(food)
if (food %in% names(short_names)) {
return(short_names[food][[1]][1])
}
gsub(",.*$", "", as.character(food))
}
foods <- read_csv("/tmp/foods_curated.csv") %>%
distinct() %>%
filter(!name %in% c("Couscous, plain, cooked", "Flour, gram", "Pasta, egg, white, tagliatelle, fresh, boiled in unsalted water")) %>%
mutate(label = ifelse(carbs >= 5, lapply(name, shorten), "")) %>%
mutate(g2 = fct_collapse(g2, `Meat and fish` = c("Meat", "Fish"))) %>%
mutate(g2 = fct_reorder(g2, carbs, .fun='max'))
foods %>%
ggplot(aes(carbs, g2, label = label)) +
geom_jitter(height = 0.3, color = "grey50", alpha = ifelse(foods$carbs < 5, 0.5, 0)) + # trick to only show points with carbs < 5 (o/w factor ordering is lost for some reason)
#geom_beeswarm(data = filter(foods, carbs < 5), color = "grey50", groupOnX = FALSE) +
geom_point(data = filter(foods, carbs >= 5), color = "red", alpha = 0.5) +
geom_text_repel(segment.alpha = 0.3, point.padding = 0.1,
min.segment.length = 0.3,
size = 8/.pt,
xlim = x_limits) +
scale_x_continuous(breaks=seq(0,110,10)) +
labs(
title = "Carbohydrate content of common food ingredients",
caption = "Data source: Composition of foods integrated dataset, Public Health England"
) +
xlab(label = "Carbs (g/100g)") +
theme(axis.title.y = element_blank())
x <- foods %>% filter(g2 == "Vegetables") %>% filter(carbs >= 5)
View(x)
short_names <- c(
"Barley, pearl, raw" = "Pearl barley",
"Beans, broad, whole, raw" = "Broad beans",
"Beans, chick peas, canned, re-heated, drained" = "Chick peas",
"Bread, white, premium" = "White bread",
"Flour, wheat, white, plain, soft" = "White flour",
"Lentils, green and brown, whole, dried, raw" = "Green/brown lentils",
"Lentils, red, split, dried, raw" = "Red lentils",
"Pastry, filo, retail, cooked" = "Filo pastry",
"Peas, split, dried, raw" = "Split peas",
"Pepper, cayenne, ground" = "Cayenne pepper",
"Potatoes, new and salad, flesh only, raw" = "New potatoes",
"Potatoes, old, raw, flesh only" = "Potatoes",
"Squash, butternut, raw" = "Butternut squash",
"Sugar, white" = "White sugar",
"Sugar, brown" = "Brown sugar",
"Syrup, golden" = "Golden syrup",
"Wheat, bulgur, raw" = "Bulgur wheat",
"Yogurt, low fat, plain" = "Low-fat yogurt"
)
shorten <- function(food) {
food = str_trim(food)
if (food %in% names(short_names)) {
return(short_names[food][[1]][1])
}
gsub(",.*$", "", as.character(food))
}
foods <- read_csv("/tmp/foods_curated.csv") %>%
distinct() %>%
filter(!name %in% c(
"Beans, haricot, whole, dried, boiled in unsalted water",
"Carrots, old, raw",
"Couscous, plain, cooked",
"Flour, gram",
"Lentils, green and brown, whole, dried, boiled in unsalted water",
"Parsnip, boiled in unsalted water",
"Pasta, egg, white, tagliatelle, fresh, boiled in unsalted water"
)) %>%
mutate(label = ifelse(carbs >= 5, lapply(name, shorten), "")) %>%
mutate(g2 = fct_collapse(g2, `Meat and fish` = c("Meat", "Fish"))) %>%
mutate(g2 = fct_reorder(g2, carbs, .fun='max'))
x <- foods %>% filter(g2 == "Vegetables") %>% filter(carbs >= 5)
foods %>%
ggplot(aes(carbs, g2, label = label)) +
geom_jitter(height = 0.3, color = "grey50", alpha = ifelse(foods$carbs < 5, 0.5, 0)) + # trick to only show points with carbs < 5 (o/w factor ordering is lost for some reason)
#geom_beeswarm(data = filter(foods, carbs < 5), color = "grey50", groupOnX = FALSE) +
geom_point(data = filter(foods, carbs >= 5), color = "red", alpha = 0.5) +
geom_text_repel(segment.alpha = 0.3, point.padding = 0.1,
min.segment.length = 0.3,
size = 8/.pt,
xlim = x_limits) +
scale_x_continuous(breaks=seq(0,110,10)) +
labs(
title = "Carbohydrate content of common food ingredients",
caption = "Data source: Composition of foods integrated dataset, Public Health England"
) +
xlab(label = "Carbs (g/100g)") +
theme(axis.title.y = element_blank())
foods %>%
ggplot(aes(carbs, g2, label = label)) +
#geom_jitter(height = 0.3, color = "grey50", alpha = ifelse(foods$carbs < 5, 0.5, 0)) + # trick to only show points with carbs < 5 (o/w factor ordering is lost for some reason)
geom_beeswarm(color = "grey50", alpha = ifelse(foods$carbs < 5, 0.5, 0), groupOnX = FALSE) +
geom_point(data = filter(foods, carbs >= 5), color = "red", alpha = 0.5) +
geom_text_repel(segment.alpha = 0.3, point.padding = 0.1,
min.segment.length = 0.3,
size = 8/.pt,
xlim = x_limits) +
scale_x_continuous(breaks=seq(0,110,10)) +
labs(
title = "Carbohydrate content of common food ingredients",
caption = "Data source: Composition of foods integrated dataset, Public Health England"
) +
xlab(label = "Carbs (g/100g)") +
theme(axis.title.y = element_blank())
foods %>%
ggplot(aes(carbs, g2, label = label)) +
#geom_jitter(height = 0.3, color = "grey50", alpha = ifelse(foods$carbs < 5, 0.5, 0)) + # trick to only show points with carbs < 5 (o/w factor ordering is lost for some reason)
geom_beeswarm(data = filter(foods, carbs < 5), color = "grey50", groupOnX = FALSE) +
geom_point(data = filter(foods, carbs >= 5), color = "red", alpha = 0.5) +
geom_text_repel(segment.alpha = 0.3, point.padding = 0.1,
min.segment.length = 0.3,
size = 8/.pt,
xlim = x_limits) +
scale_x_continuous(breaks=seq(0,110,10)) +
labs(
title = "Carbohydrate content of common food ingredients",
caption = "Data source: Composition of foods integrated dataset, Public Health England"
) +
xlab(label = "Carbs (g/100g)") +
theme(axis.title.y = element_blank())
foods %>%
ggplot(aes(carbs, g2, label = label)) +
geom_jitter(height = 0.3, color = "grey50", alpha = ifelse(foods$carbs < 5, 0.5, 0)) + # trick to only show points with carbs < 5 (o/w factor ordering is lost for some reason)
#geom_beeswarm(data = filter(foods, carbs < 5), color = "grey50", groupOnX = FALSE) +
geom_point(data = filter(foods, carbs >= 5), color = "red", alpha = 0.5) +
geom_text_repel(segment.alpha = 0.3, point.padding = 0.1,
min.segment.length = 0.3,
size = 8/.pt,
xlim = x_limits) +
scale_x_continuous(breaks=seq(0,110,10)) +
labs(
title = "Carbohydrate content of common food ingredients",
caption = "Data source: Composition of foods integrated dataset, Public Health England"
) +
xlab(label = "Carbs (g/100g)") +
theme(axis.title.y = element_blank())
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv")
View(mccance)
x <- mccance %>% filter(group == "QE")
x <- mccance %>% filter(Group == "QE")
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv") %>%
select(c("Food Code", "Food Name", "Group", "Carbohydrate(g)"))
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv") %>%
select(c("Food Code", "Food Name", "Group", "Carbohydrate (g)"))
x <- mccance %>% filter(Group == "QE")
x <- mccance %>% filter(str_detect(Group, "^Q"))
x <- mccance %>% filter(str_detect(Group, "^Q")) %>% filter(`Carbohydrate (g)`  > 5)
x <- mccance %>%
filter(str_detect(Group, "^Q")) %>%
filter(`Carbohydrate (g)` != "N") %>%
filter(`Carbohydrate (g)` != "Tr") %>%
filter(`Carbohydrate (g)`  > 5)
x <- mccance %>%
filter(str_detect(Group, "^A")) %>%
filter(`Carbohydrate (g)` != "N") %>%
filter(`Carbohydrate (g)` != "Tr") %>%
filter(`Carbohydrate (g)`  > 5)
x <- mccance %>%
filter(str_detect(Group, "^C")) %>%
filter(`Carbohydrate (g)` != "N") %>%
filter(`Carbohydrate (g)` != "Tr") %>%
filter(`Carbohydrate (g)`  > 5)
x <- mccance %>%
filter(str_detect(Group, "^B")) %>%
filter(`Carbohydrate (g)` != "N") %>%
filter(`Carbohydrate (g)` != "Tr") %>%
filter(`Carbohydrate (g)`  > 5)
mccance %>% mutate(g = substr(1, 2))
mccance %>% mutate(g = substr(Group, 1, 2))
mccance %>% mutate(g = substr(Group, 1, 1))
x <- mccance %>%
mutate(g = substr(Group, 1, 1)) %>%
filter(g == 'B') %>%
filter(`Carbohydrate (g)` != "N") %>%
filter(`Carbohydrate (g)` != "Tr") %>%
filter(`Carbohydrate (g)`  > 5)
mccance %>%
mutate(g = substr(Group, 1, 1)) %>%
group_by(g) %>%
tally()
mccance %>%
mutate(g = substr(Group, 1, 1)) %>%
group_by(g) %>%
tally() %>%
arrange(n)
mccance %>%
mutate(g = substr(Group, 1, 1)) %>%
group_by(g) %>%
tally() %>%
arrange(desc(n))
mccance %>%
filter(Group == 'M') %>%
group_by(Group) %>%
tally() %>%
arrange(desc(n))
mccance %>%
mutate(g = substr(Group, 1, 1)) %>%
filter(g == 'M') %>%
group_by(Group) %>%
tally() %>%
arrange(desc(n))
mccance %>%
mutate(g = substr(Group, 1, 1)) %>%
filter(g == 'D') %>%
group_by(Group) %>%
tally() %>%
arrange(desc(n))
x <- mccance %>%
filter(Group == 'DG') %>%
mccance %>%
mutate(g = substr(Group, 1, 1)) %>%
group_by(g) %>%
tally() %>%
arrange(desc(n))
x <- mccance %>%
filter(Group == 'DG')
View(foods)
View(foods)
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv") %>%
rename(food_code = "Food Code") %>%
select(c(food_code, "Food Name", "Group", "Carbohydrate (g)"))
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv") %>%
rename(food_code = "Food Code", name = "Food Name") %>%
select(c(food_code, name, "Group", "Carbohydrate (g)"))
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv") %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs))
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv") %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs))
x <- mccance %>%
mutate(g = substr(group, 1, 1)) %>%
filter(g == 'B') %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs  > 5)
anti_join(x, foods, by = c("food_code"))
missing <- mccance %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs >= 5) %>%
anti_join(foods, by = c("food_code"))
View(missing)
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv") %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs)) %>%
mutate(g = substr(group, 1, 1))
x <- mccance %>%
mutate(g = substr(group, 1, 1)) %>%
filter(g == 'B') %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs  > 5)
missing <- mccance %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs >= 5) %>%
anti_join(foods, by = c("food_code"))
View(missing)
mccance <- read_csv("/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv") %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs)) %>%
mutate(g = substr(group, 1, 1)) %>%
filter(!group %in% c("DR", "MR")) # filter out dishes
x <- mccance %>%
mutate(g = substr(group, 1, 1)) %>%
filter(g == 'B') %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs  > 5)
missing <- mccance %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs >= 5) %>%
anti_join(foods, by = c("food_code"))
View(missing)
mccance_file = "/Users/tom/projects-workspace/ingreedy-visualization/data/McCance___Widdowson_s_Composition_of_Foods_Integrated_Dataset.csv"
col_names <- names(read_csv(mccance_file, n_max = 0))
mccance <- read_csv(mccance_file,col_names = col_names, skip = 3) %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs)) %>%
mutate(g = substr(group, 1, 1)) %>%
filter(!group %in% c("DR", "MR")) # filter out dishes
View(mccance)
mccance <- read_csv(mccance_file, col_names = col_names, skip = 3) %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs)) %>%
mutate(g = substr(group, 1, 1)) %>%
filter(!group %in% c("DR", "MR")) # filter out dishes
x <- mccance %>%
mutate(g = substr(group, 1, 1)) %>%
filter(g == 'B') %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs  > 5)
missing <- mccance %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs >= 5) %>%
anti_join(foods, by = c("food_code"))
View(missing)
missing %>%
group_by(g) %>%
tally() %>%
arrange(desc(n))
missing %>%
filter(g == 'A') %>%
group_by(Group) %>%
tally() %>%
arrange(desc(n))
missing %>%
filter(g == 'A') %>%
group_by(group) %>%
tally() %>%
arrange(desc(n))
mccance <- read_csv(mccance_file, col_names = col_names, skip = 3) %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs)) %>%
mutate(g = substr(group, 1, 1)) %>%
filter(!group %in% c(
"DR", # vegetable dishes
"MR" # meat dishes
))
mccance <- read_csv(mccance_file, col_names = col_names, skip = 3) %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs)) %>%
mutate(g = substr(group, 1, 1)) %>%
filter(!group %in% c(
"AM", # biscuits
"AN", # cakes
"DR", # vegetable dishes
"MR" # meat dishes
))
x <- mccance %>%
mutate(g = substr(group, 1, 1)) %>%
filter(g == 'B') %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs  > 5)
missing <- mccance %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs >= 5) %>%
anti_join(foods, by = c("food_code"))
x <- mccance %>%
filter(Group == 'DG')
missing %>%
group_by(g) %>%
tally() %>%
arrange(desc(n))
missing %>%
filter(g == 'A') %>%
group_by(group) %>%
tally() %>%
arrange(desc(n))
missing %>%
group_by(g) %>%
tally() %>%
arrange(desc(n))
x <- missing %>%
filter(g == 'A')
mccance <- read_csv(mccance_file, col_names = col_names, skip = 3) %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs)) %>%
mutate(g = substr(group, 1, 1)) %>%
filter(!group %in% c(
"AI", # breakfast cereals
"AM", # biscuits
"AN", # cakes
"AS", # puddings
"DR", # vegetable dishes
"MR" # meat dishes
))
x <- mccance %>%
mutate(g = substr(group, 1, 1)) %>%
filter(g == 'B') %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs  > 5)
missing <- mccance %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs >= 5) %>%
anti_join(foods, by = c("food_code"))
x <- mccance %>%
filter(Group == 'DG')
missing %>%
group_by(g) %>%
tally() %>%
arrange(desc(n))
missing %>%
filter(g == 'A') %>%
group_by(group) %>%
tally() %>%
arrange(desc(n))
x <- missing %>%
filter(g == 'A')
missing %>%
filter(g == 'F') %>%
group_by(group) %>%
tally() %>%
arrange(desc(n))
x <- missing %>%
filter(g == 'F')
View(missing)
mccance <- read_csv(mccance_file, col_names = col_names, skip = 3) %>%
rename(food_code = "Food Code", name = "Food Name", group = Group, carbs = "Carbohydrate (g)") %>%
select(c(food_code, name, group, carbs)) %>%
mutate(g = substr(group, 1, 1)) %>%
filter(!group %in% c(
"AE", # pizzas
"AI", # breakfast cereals
"AM", # biscuits
"AN", # cakes
"AS", # puddings
"BH", # milk-based drinks
"DR", # vegetable dishes
"JR", # fish products and dishes
"MBG", # burgers and grillsteaks
"MI", # meat products
"MR", # meat dishes
"WC" # sauces
))
x <- mccance %>%
mutate(g = substr(group, 1, 1)) %>%
filter(g == 'B') %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs  > 5)
missing <- mccance %>%
filter(carbs != "N") %>%
filter(carbs != "Tr") %>%
filter(carbs >= 5) %>%
anti_join(foods, by = c("food_code"))
x <- mccance %>%
filter(Group == 'DG')
missing %>%
group_by(g) %>%
tally() %>%
arrange(desc(n))
missing %>%
filter(g == 'F') %>%
group_by(group) %>%
tally() %>%
arrange(desc(n))
View(missing)
missing %>%
group_by(g) %>%
tally() %>%
arrange(desc(n))
